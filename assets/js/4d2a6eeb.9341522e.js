"use strict";(self.webpackChunkcentauri_documentation=self.webpackChunkcentauri_documentation||[]).push([[859],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={title:"REST Client",description:"This guide will explain how to use the REST Client and perform various actions."},o=void 0,l={unversionedId:"guides/rest_client/README",id:"guides/rest_client/README",title:"REST Client",description:"This guide will explain how to use the REST Client and perform various actions.",source:"@site/docs/guides/rest_client/README.md",sourceDirName:"guides/rest_client",slug:"/guides/rest_client/",permalink:"/docs/guides/rest_client/",draft:!1,editUrl:"https://github.com/kkrypt0nn/centauri/tree/main/documentation/docs/guides/rest_client/README.md",tags:[],version:"current",frontMatter:{title:"REST Client",description:"This guide will explain how to use the REST Client and perform various actions."},sidebar:"sidebar",previous:{title:"Intents",permalink:"/docs/guides/intents/"},next:{title:"Sending Local Images",permalink:"/docs/guides/sending_local_images/"}},s={},c=[{value:"Creating a REST Client",id:"creating-a-rest-client",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Using the client",id:"using-the-client",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The REST Client is a client that will facilitate the interaction with Discord's REST API to - for example - send messages or create new channels."),(0,i.kt)("p",null,"You can see an example of a REST Client ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kkrypt0nn/centauri/blob/main/_examples/rest_client/main.go"},"here"),"."),(0,i.kt)("h2",{id:"creating-a-rest-client"},"Creating a REST Client"),(0,i.kt)("p",null,"To create a REST Client you just need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"NewRestClient()")," function on the ",(0,i.kt)("inlineCode",{parentName:"p"},"centauri")," package like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'botClient := centauri.NewRestClient("Bot BOT_TOKEN")\n')),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("p",null,"As argument you just need to pass your bot's token with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Bot")," prefix before."),(0,i.kt)("h2",{id:"using-the-client"},"Using the client"),(0,i.kt)("p",null,"To use the client let IntelliSense help you, simply write down ",(0,i.kt)("inlineCode",{parentName:"p"},"botClient.")," and it will show existing methods you can use. If there are any arguments needed, you can check the ",(0,i.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/kkrypt0nn/centauri/rest#Client"},"Go Reference documentation")," to know what kind of arguments come where, otherwise you can also ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl/Cmd+Left Click")," the method in your favorite IDE."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"When you create or edit things like channels, messages, etc. the structure for these functions are ",(0,i.kt)("em",{parentName:"p"},"almost")," always ",(0,i.kt)("inlineCode",{parentName:"p"},"discord.X")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," is the method you're calling. For example:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'botClient.CreateGlobalApplicationCommand(discord.CreateGlobalApplicationCommand{\n    Name:        "test",\n    Description: ptr.New("test"),\n})\n')),(0,i.kt)("p",{parentName:"admonition"},"Here you can see the method is ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateGlobalApplicationCommand")," and the argument struture is ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateGlobalApplicationCommand")," as well, that makes it easier to remember.")))}m.isMDXComponent=!0}}]);